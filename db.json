{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1523925928887},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1523925928887},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1523925928887},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1523925928887},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1523925928897},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1523925928887},{"_id":"source/_posts/myfirstPage.md","hash":"b3e9818ea780422976a17140993bb79fb5662002","modified":1523930131000},{"_id":"source/_posts/new-article.md","hash":"24a2867d2d89d20aa32492ff04fb9f1c571fc305","modified":1523930706478},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1523925912737},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1523925928888},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1523925928888},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1523925928888},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1523925928889},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1523925928889},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1523925928889},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1523925928889},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1523925928889},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1523925928890},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1523925928890},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1523925928890},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1523925928895},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1523925928896},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1523925928896},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1523925928896},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1523925928896},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1523925928897},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1523925928897},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1523925928897},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1523925928888},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1523925928891},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1523925928891},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1523925928891},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1523925928891},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1523925928892},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1523925928892},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1523925928892},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1523925928892},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1523925928893},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1523925928894},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1523925928894},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1523925928894},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1523925928895},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1523925928895},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1523925928895},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1523925928898},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1523925928901},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1523925928910},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1523925928911},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1523925928911},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1523925928911},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1523925928912},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1523925928911},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1523925928914},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1523925928912},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1523925928916},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1523925928892},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1523925928893},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1523925928893},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1523925928893},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1523925928894},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1523925928894},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1523925928898},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1523925928899},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1523925928899},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1523925928899},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1523925928899},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1523925928899},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1523925928900},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1523925928900},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1523925928900},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1523925928900},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1523925928901},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1523925928901},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1523925928893},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1523925928902},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1523925928903},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1523925928915},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1523925928915},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1523925928912},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1523925928912},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1523925928907},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1523925928913},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1523925928913},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1523925928913},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1523925928913},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1523925928907},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1523925928905},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1523925928910},{"_id":"public/2018/04/17/hello-world/index.html","hash":"694b674ec1b63b560f227bd9b719409777b7e5c1","modified":1523930078619},{"_id":"public/2016/04/17/new-article/index.html","hash":"a9d3782fd64ff58454646c53e25fac5d795be534","modified":1523930078619},{"_id":"public/archives/index.html","hash":"ba996bed843f3510110413ad19c88579c4134452","modified":1523930078619},{"_id":"public/archives/2016/index.html","hash":"6f4c6ab551ccd0e70afb804d7b57732187cc25ad","modified":1523930078619},{"_id":"public/archives/2016/04/index.html","hash":"4c3c62d90a388bcc65dcc59ba01a366fb9a732af","modified":1523930078619},{"_id":"public/archives/2018/index.html","hash":"4eee62779b470809e40ccf524ebaa5c89dc20234","modified":1523930078619},{"_id":"public/archives/2018/04/index.html","hash":"6a4b1dc9f3cad8644eec1cd1217708038f64bae8","modified":1523930078620},{"_id":"public/2018/04/17/myfirstPage/index.html","hash":"4548ee10f165a922c34647abcf420290be295ce8","modified":1523930134136},{"_id":"public/index.html","hash":"cdc734262336e257e3b583ec804a9d5d2a87730a","modified":1523930134136},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1523930078624},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1523930078624},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1523930078625},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1523930078625},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1523930078626},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1523930078626},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1523930078626},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1523930078626},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1523930078626},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1523930078626},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1523930079146},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1523930079188},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1523930079189},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1523930079189},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1523930079189},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1523930079189},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1523930079189},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1523930079189},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1523930079190},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1523930079190},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1523930079190},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1523930079197},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1523930079197}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"webpack从此不再是我们的痛点 — 核心基础（转载）","date":"2018-04-17T00:53:42.000Z","_content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"main-area article-area shadow\"><time data-v-13f76525=\"\" datetime=\"2018-04-14T10:31:42.809Z\" title=\"Sat Apr 14 2018 18:31:42 GMT+0800 (CST)\" class=\"time\">2018 年 04 月 14 日</time><!----></div></div></div><!----><div data-v-13f76525=\"\" itemprop=\"articleBody\" class=\"article-content\"><blockquote>\n<p>webpack一直是前端工程师的痛点，因为他的复杂、分散、loader、plugin这些第三方，让我们的学习成本陡然上升，使我们一直对他的配置模棱两可，今天带大家彻底明白他如何配置，摆脱困扰我们很久的痛点。本篇主要是webpack基础配置详解，关于webpack的模块chunk、编译阶段流程、输出阶段流程、loader的编写和手写plugin会在后续文章推出，为了避免错过可以关注我或者收藏我的个人博客www.ngaiwe.com</p>\n</blockquote>\n<h3 class=\"heading\" data-id=\"heading-0\">1.webpack是什么？</h3>\n<p>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。并且跟具你的在项目中的各种需求，实现自动化处理，解放我们的生产力</p>\n<ul>\n<li>代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 。</li>\n<li>文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等。</li>\n<li>代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载。</li>\n<li>模块合并：在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件。</li>\n<li>自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器。</li>\n<li>代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。</li>\n<li>自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。</li>\n</ul>\n<h3 class=\"heading\" data-id=\"heading-1\">2.项目初始化</h3>\n<pre><code class=\"hljs webpack init\" lang=\"webpack init\">mkdir webpack-start\ncd webpack-start\nnpm init\n</code></pre><h3 class=\"heading\" data-id=\"heading-2\">3.webpack核心概念</h3>\n<ul>\n<li>Entry：入口，webpack执行构建的第一步将从Entry开始，可抽象理解为输入</li>\n<li>Module：模块，在webpacl中一切皆为模块，一个模块对应一个文件，webpack会从配置的Entry开始递归找出所有依赖的模块</li>\n<li>Chunk：代码块，一个chunk由多个模块组合而成，用于将代码合并和分割</li>\n<li>Loader：模块转换器，用于把模块原内容按照需求转换为需要的新内容</li>\n<li>Plugin：扩展插件，在webpack构建流程中的特定时机注入扩展逻辑来改变构建结果和想要做的事情</li>\n<li>Output：输入结果，在webpack经过一系列处理并得到最终想要的代码然后输出结果</li>\n</ul>\n<blockquote>\n<p>Webpack 启动后会从 <code>Entry</code> 里配置的 <code>Module</code> 开始递归解析 Entry 依赖的所有 Module。 每找到一个 Module， 就会根据配置的<code>Loader</code>去找出对应的转换规则，对 Module 进行转换后，再解析出当前 Module 依赖的 Module。 这些模块会以 Entry 为单位进行分组，一个 Entry 和其所有依赖的 Module 被分到一个组也就是一个 <code>Chunk</code>。最后 Webpack 会把所有 Chunk 转换成文件输出。 在整个流程中 Webpack 会在恰当的时机执行 Plugin 里定义的逻辑。</p>\n</blockquote>\n<h5 class=\"heading\" data-id=\"heading-3\">1.Entry</h5>\n<blockquote>\n<p>context用来解决配置文件和入口文件不再同一层结构，列如我们配置文件在config，入口文件在根目录，则如下配置</p>\n</blockquote>\n<pre><code class=\"hljs context\" lang=\"context\">module.exports = {\n  context: path.join(__dirname, '..'), // 找到根目录\n  entry: './main.js' //根目录下的入口文件\n}\n</code></pre><blockquote>\n<p>最简单的单页面(SPA)Entry入口，将main.js引入，并根据main.js中引用和依赖的模块开始解析</p>\n</blockquote>\n<pre><code class=\"hljs entry\" lang=\"entry\">module.exports = {\n  entry: './main.js'\n}\n</code></pre><blockquote>\n<p>多页面(MPA)Entry入口，将多个文件引入，当然一般是读取指定文件夹内的入口文件，然后引入</p>\n</blockquote>\n<pre><code class=\"hljs entry\" lang=\"entry\">entry: {\n  home: \"./home.js\",\n  about: \"./about.js\",\n  contact: \"./contact.js\"\n}\n</code></pre><p>如果是单页面(传入的是字符串或字符串数组)，则chunk会被命名为main，如果是多页面(传入一个对象)，则每个键(key)会是chunk的名称，描述了chunk的入口起点</p>\n<h5 class=\"heading\" data-id=\"heading-4\">2.Output</h5>\n<blockquote>\n<p>Object 指示webpack如何去输出，以及在哪里输出你的bundle、asset 和其他你所打包或使用 webpack 载入的任何内容</p>\n</blockquote>\n<ul>\n<li>\n<p>path：输出目录对应一个绝对路径</p>\n<pre><code class=\"hljs path\" lang=\"path\">path: path.resolve(__dirname, 'dist')\n</code></pre></li>\n<li>\n<p>pathinfo：boolean 默认false作用是告诉webpack在bundle中引入所包含模块信息的相关注释，不应用于生产环境(production)，对开发环境(development)极其有用</p>\n</li>\n<li>\n<p>publicPath：主要作用是针对打包后的文件里面的静态文件路径处理</p>\n</li>\n<li>\n<p>filename：定义每个输出bundle的名称，这些bundle将写入output.path选项指定的目录下，对于单入口Entry，filename是一个静态名称</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"bundle.js\"\n</code></pre><p>但是在webpack中我们会用到代码拆分、各种插件plugin或多入口Entry创建多个bundle，这样我们就应该给每个bundle一个唯一的名称</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"[name].bundle.js\"\n</code></pre><p>使用内部chunk id</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"[id].bundle.js\"\n</code></pre><p>唯一hash生成</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"[name].[hash].bundle.js\"\n</code></pre><p>使用基于每个 chunk 内容的 hash</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"[chunkhash].bundle.js\"\n</code></pre></li>\n</ul>\n<h5 class=\"heading\" data-id=\"heading-5\">3.Module模块</h5>\n<blockquote>\n<p>处理项目中应用的不同模块，主要配置皆在Rules中，匹配到请求的规则数组，这些规则能够对模块应用loader，或者修改解析器parser</p>\n</blockquote>\n<ul>\n<li>\n<p>Module.noParse： 防止webpack解析的时候，将规则匹配成功的文件进行解析和忽略大型的library来对性能的优化，在被忽略的文件中不应该含有import、require和define的调用</p>\n<pre><code class=\"hljs noParse\" lang=\"noParse\">module.exports = {\n  module: {\n    rules: [],\n    noParse: function(content) {\n      return /jquery|lodash/.test(content) // 忽略jquery文件解析，直接编译打包\n    }\n  }\n}\n</code></pre></li>\n<li>\n<p>Rules：创建模块时，匹配请求的规则数组</p>\n<ul>\n<li>\n<p>Rule条件：resource(请求文件的绝对路径)、issuer(被请求资源的模块文件的绝对路径，导入时的位置)，比如一个文件A导入文件B，resource是/B，issuer是/A是导入文件时的位置，而不是真正的位置，在规则中，test/include/exclude/resource对resource匹配，而issuer只对issuer匹配</p>\n</li>\n<li>\n<p>Test/include/exclude/resource/issuer的用法和区别</p>\n<pre><code class=\"hljs rule\" lang=\"rule\">module.exports = {\n    modules: {\n        rules: [\n          {\n            test: /\\.js?$/,\n            include: [\n              path.resolve(__dirname, \"app\")\n            ],\n            exclude: [\n              path.resolve(__dirname, \"app/demo\")\n            ],\n            resource:{\n              test: /\\.js?$/,\n              include: path.resolve(__dirname, \"app\"),\n              exclude: path.resolve(__dirname, \"app/demo\")\n            },\n            issuer: {\n              test: /\\.js?$/,\n              include: path.resolve(__dirname, \"app\"),\n              exclude: path.resolve(__dirname, \"app/demo\")\n            }\n          }\n        ]\n  }\n}\n</code></pre><p>test：一般是提供一个正则表达式或正则表达式的数组，绝对路径符合这个正则的则意味着满足这个条件</p>\n<p>include：是一个字符串或者字符串数组，指定目录中的文件需要走这个规则</p>\n<p>exclude：同样是一个字符串或者字符串数组，指定目录中的文件不需要走这个规则</p>\n<p>resource：就是对text/include/exclude的一个对象包装，和他们单独写没有区别</p>\n<p>issuer：和resource有异曲同工的作用，不过区别在于它是将这个rule应用于哪个文件以及这个文件所导入的所有依赖文件</p>\n</li>\n<li>\n<p>resourceQuery：和resource用法一样，不过针对的是匹配结果'?'后面的路径参数，可以调用resource中的text等</p>\n</li>\n<li>\n<p>oneOf：表示对该资源只应用第一个匹配的规则，一般结合resourceQuery</p>\n<pre><code class=\"hljs oneOf\" lang=\"oneOf\">{\n  test: /\\.(png|jpe?g|gif|svg)$/,\n  oneOf: [\n    {\n      resourceQuery: /inline/, \n      loader: 'url-loader'\n    },\n    {\n      loader: 'file-loader'\n    }\n  ]\n}\n</code></pre><ul>\n<li>path/to/foo.png?inline: 会匹配url-loader</li>\n<li>path/to/foo.png?other:会匹配file-loader</li>\n<li>path/to/foo.png: 会匹配file-loader</li>\n</ul>\n</li>\n<li>\n<p>useEntry：object包含着每一个loader并且对应loader的配置文件</p>\n<pre><code class=\"hljs useEntry\" lang=\"useEntry\">{\n  loader: \"css-loader\",\n  options: {\n    modules: true\n  }\n}\n</code></pre><p>options会传入loader，可以理解为loader的选项</p>\n</li>\n<li>\n<p>use：是对useEntry的集合，并且对每一个入口指定使用一个loader</p>\n<pre><code class=\"hljs use\" lang=\"use\">use: [\n  'style-loader',\n  {\n    loader: 'css-loader',\n    options: {\n      importLoaders: 1\n    }\n  },\n  {\n    loader: 'less-loader',\n    options: {\n      noIeCompat: true\n    }\n  }\n]\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<h5 class=\"heading\" data-id=\"heading-6\">4.Resolve解析</h5>\n<blockquote>\n<p>主要用来模块如何被解析，给webpack提供默认值</p>\n</blockquote>\n<ul>\n<li>\n<p>alias：object主要用来让import和require调用更方便，设置初始路径</p>\n<pre><code class=\"hljs alias\" lang=\"alias\">module.exports = {\n alias: {\n  Utilities: path.resolve(__dirname, 'src/utilities/'),\n  Templates: path.resolve(__dirname, 'src/templates/')\n }   \n}\n// 最开始的import\nimport Utility from '../../utilities/utility';\n// 配置完以后\nimport Utility from 'Utilities/utility';\n</code></pre></li>\n<li>\n<p>enforceExtension：Boolean 默认false，表示引用不需要扩展名，为true时，import、require中引用必须加扩展名</p>\n</li>\n<li>\n<p>extensions：Array 自动解析不需要扩展名</p>\n<pre><code class=\"hljs extensions\" lang=\"extensions\">extensions: [\".js\", \".json\"]  // .js、.json引入不需要扩展名\n</code></pre></li>\n<li>\n<p>modules：Array webpack解析模块的时候需要搜索的目录，一般用于优先搜索和非node_modules文件中的自定义模块</p>\n<pre><code class=\"hljs modules\" lang=\"modules\">modules: [path.resolve(__dirname, \"src\"), \"node_modules\"] //优先搜索src目录\n</code></pre></li>\n</ul>\n<h5 class=\"heading\" data-id=\"heading-7\">5.Loader</h5>\n<blockquote>\n<p>通过使用不同的Loader，Webpack可以要把不同的文件都转成JS文件,比如CSS、ES6/7、JSX等，一般用于module的use中</p>\n</blockquote>\n<pre><code class=\"hljs loader\" lang=\"loader\">module: {\n  rules:[\n      {\n        test:/\\.css$/,\n        use:['style-loader','css-loader'],\n        include:path.join(__dirname,'./src'),\n        exclude:/node_modules/\n      }\n  ]      \n}\n</code></pre><p>具体相关loader需要查看你要引入的loader官方文档API，手写Loader会在下一篇文章具体介绍</p>\n<h5 class=\"heading\" data-id=\"heading-8\">6.Plugin插件</h5>\n<blockquote>\n<p>Array 扩展webpack，在webpack构建流程中的特定时机注入扩展逻辑来改变构建结果和想要做的事情，具体使用查看你引入的plugin官方文档，手写plugin会在后续文章中推出</p>\n</blockquote>\n<h5 class=\"heading\" data-id=\"heading-9\">7.webpack-dev-server</h5>\n<blockquote>\n<p>开发中的server，webpack-dev-server可以快速搭建起本地服务，具体使用查看 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-dev-server\" rel=\"nofollow noopener noreferrer\">webpack-dev-server</a></p>\n</blockquote>\n<h5 class=\"heading\" data-id=\"heading-10\">8.Devtool</h5>\n<blockquote>\n<p>此选项控制是否生成，以及如何生成，官方推荐 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdoc.webpack-china.org%2Fplugins%2Fsource-map-dev-tool-plugin\" rel=\"nofollow noopener noreferrer\">SourceMapDevToolPlugin</a> 和 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdoc.webpack-china.org%2Floaders%2Fsource-map-loader\" rel=\"nofollow noopener noreferrer\">source-map-loader</a> 建议看官方文档 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdoc.webpack-china.org%2Fconfiguration%2Fdevtool%2F\" rel=\"nofollow noopener noreferrer\">Devtool</a> 主要用来控制打包品质和在dev环境的调试便捷度和编译的快慢</p>\n</blockquote>\n<h5 class=\"heading\" data-id=\"heading-11\">9.Watch</h5>\n<blockquote>\n<p>webpack 可以监听文件变化，当它们修改后会重新编译和 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-hot-middleware\" rel=\"nofollow noopener noreferrer\">HotModuleReplacementPlugin</a> 有相似之处，监听文件变动热启动</p>\n</blockquote>\n<h3 class=\"heading\" data-id=\"heading-12\">4.配置webpack</h3>\n<p>webpack安装命令</p>\n<pre><code class=\"hljs webpack\" lang=\"webpack\">npm install webpack webpack-cli -D\n</code></pre><p>Webpack.config.js</p>\n<blockquote>\n<p>具体用到的plugin插件</p>\n</blockquote>\n<ul>\n<li>clean-webpack-plugin：用于打包前清空输出目录 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fclean-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n<li>html-webpack-plugin：用于自动产出HTML和引用产出的资源 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fhtml-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n<li>copy-webpack-plugin：用于拷贝静态资源，包括未被引用的资源 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fcopy-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n<li>uglifyjs-webpack-plugin：用于压缩JS可以让输出的JS文件体积更小、加载更快、流量更省，还有混淆代码的加密功能 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fuglifyjs-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n<li>extract-text-webpack-plugin：因为CSS的下载和JS可以并行,当一个HTML文件很大的时候，我们可以把CSS单独提取出来加载 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fextract-text-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n</ul>\n<pre><code class=\"hljs webpack-server\" lang=\"webpack-server\">const path = require('path');\nconst webpack = require('webpack');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst CopyWebpackPlugin = require('copy-webpack-plugin');\nconst UglifyjsWebpackPlugin = require('uglifyjs-webpack-plugin')\n// npm i extract-text-webpack-plugin@next // @next可以安装下一个非正式版本\nconst ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');\nlet cssExtract = new ExtractTextWebpackPlugin({\n    filename: 'css/css.css',\n    allChunks: true\n});\nlet lessExtract = new ExtractTextWebpackPlugin('css/less.css');\nlet sassExtract = new ExtractTextWebpackPlugin('css/sass.css');\n/**\n * 有些时候我们希望把页面中的CSS文件单独拉出来保存加载\n * extract-text-webpack-plugin\n */\n//let pages = ['index', 'base'];\n// pages = pages.map(page =&gt; new HtmlWebpackPlugin({\n//     template: './src/index.html',//指定产的HTML模板\n//     filename: `${page}.html`,//产出的HTML文件名\n//     title: `${page}`,\n//     chunks: ['common', `${page}`],//在产出的HTML文件里引入哪些代码块\n//     hash: true,// 会在引入的js里加入查询字符串避免缓存,\n//     minify: {\n//         removeAttributeQuotes: true\n//     }\n// }));\nmodule.exports = {\n    //先找到每个入口(Entry)，然后从各个入口分别出发，找到依赖的模块(Module)，\n    //然后生成一个Chunk(代码块),最后会把Chunk写到文件系统中(Assets)   \n    entry: './src/main.js',\n    output: {\n        path: path.join(__dirname, 'dist'),//输出的文件夹，只能是绝对路径 \n        //name是entry名字main,hash根据打包后的文件内容计算出来的一个hash值\n        filename: '[name].[hash].js' //打包后的文件名\n    },\n    resolve: {\n        //引入模块的时候，可以不用扩展名 \n        extensions: [\".js\", \".less\", \".json\"],\n        alias: {//别名\n            \"bootstrap\": \"bootstrap/dist/css/bootstrap.css\"\n        }\n    },\n    //表示监控源文件的变化，当源文件发生改变后，则重新打包\n    watch: false,\n    watchOptions: {\n        ignored: /node_modules/,\n        poll: 1000,//每秒钟询问的次数\n        aggregateTimeout: 500//\n    },\n    //devtool: 'source-map',//单独文件，可以定位到哪一列出错了\n    // devtool: 'cheap-module-source-map',//单独文件，体积更小，但只能定位到哪一行出错\n    // devtool: 'eval-source-map',//不会生成单独文件，\n    // devtool: 'cheap-module-eval-source-map',//不会生成单独文件 只定位到行，体积更小\n    /*\n    loader有三种写法\n    use\n    loader\n    use+loader\n    * */\n    module: {\n        rules: [\n            {\n                test: require.resolve('jquery'),\n                use: {\n                    loader: 'expose-loader',\n                    options: '$'\n                }\n            },\n            {\n                test: /\\.js/,\n                use: {\n                    loader: 'babel-loader',\n                    query: {\n                        presets: [\"env\", \"stage-0\", \"react\"]\n                    }\n                }\n            },\n            {\n                //file-loader是解析图片地址，把图片从源位置拷贝到目标位置并且修改原引用地址\n                //可以处理任意的二进制，bootstrap 里字体\n                //url-loader可以在文件比较小的时候，直接变成base64字符串内嵌到页面中\n                test: /\\.(png|jpg|gif|svg|bmp|eot|woff|woff2|ttf)/,\n                loader: {\n                    loader: 'url-loader',\n                    options: {\n                        limit: 5 * 1024,\n                        //指定拷贝文件的输出目录 \n                        outputPath: 'images/'\n                    }\n                }\n            },\n            {\n                test: /\\.css$/,//转换文件的匹配正则\n                //css-loader用来解析处理CSS文件中的url路径,要把CSS文件变成一个模块\n                //style-loader 可以把CSS文件变成style标签插入head中\n                //多个loader是有顺序要求的，从右往左写，因为转换的时候是从右往左转换\n                //此插件先用css-loader处理一下css文件\n                //如果压缩\n                loader: cssExtract.extract({\n                    use: [\"css-loader?minimize\"]\n                })\n                //loader: [\"style-loader\", \"css-loader\", \"postcss-loader\"]\n            },\n            {\n                test: /\\.less$/,\n                loader: lessExtract.extract({\n                    use: [\"css-loader?minimize\", \"less-loader\"]\n                })\n                //use: [\"style-loader\", \"css-loader\", \"less-loader\"]\n            },\n            {\n                test: /\\.scss$/,\n                loader: sassExtract.extract({\n                    use: [\"css-loader?minimize\", \"sass-loader\"]\n                })\n                // use: [\"style-loader\", \"css-loader\", \"sass-loader\"]\n            },\n            {\n                test: /\\.(html|htm)/,\n                loader: 'html-withimg-loader'\n            }\n        ]\n    },\n    plugins: [\n        //用来自动向模块内部注入变量\n        // new webpack.ProvidePlugin({\n        //     $: 'jquery'\n        // }),\n        new UglifyjsWebpackPlugin(),\n        new CleanWebpackPlugin([path.join(__dirname, 'dist')]),\n        //此插件可以自动产出html文件\n        new HtmlWebpackPlugin({\n            template: './src/index.html',//指定产的HTML模板\n            filename: `index.html`,//产出的HTML文件名\n            title: 'index',\n            hash: true,// 会在引入的js里加入查询字符串避免缓存,\n            minify: {\n                removeAttributeQuotes: true\n            }\n        }),\n        new CopyWebpackPlugin([{\n            from: path.join(__dirname, 'public'),\n            to: path.join(__dirname, 'dist', 'public')\n        }]),\n        cssExtract,\n        lessExtract,\n        sassExtract\n    ],\n    //配置此静态文件服务器，可以用来预览打包后项目\n    devServer: {\n        contentBase: './dist',\n        host: 'localhost',\n        port: 8000,\n        compress: true,//服务器返回给浏览器的时候是否启动gzip压缩\n    }\n}\n</code></pre>","source":"_posts/myfirstPage.md","raw":"---\ntitle: webpack从此不再是我们的痛点 — 核心基础（转载）\ndate: 2018-04-17 08:53:42\ntags:\n---\n<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"main-area article-area shadow\"><time data-v-13f76525=\"\" datetime=\"2018-04-14T10:31:42.809Z\" title=\"Sat Apr 14 2018 18:31:42 GMT+0800 (CST)\" class=\"time\">2018 年 04 月 14 日</time><!----></div></div></div><!----><div data-v-13f76525=\"\" itemprop=\"articleBody\" class=\"article-content\"><blockquote>\n<p>webpack一直是前端工程师的痛点，因为他的复杂、分散、loader、plugin这些第三方，让我们的学习成本陡然上升，使我们一直对他的配置模棱两可，今天带大家彻底明白他如何配置，摆脱困扰我们很久的痛点。本篇主要是webpack基础配置详解，关于webpack的模块chunk、编译阶段流程、输出阶段流程、loader的编写和手写plugin会在后续文章推出，为了避免错过可以关注我或者收藏我的个人博客www.ngaiwe.com</p>\n</blockquote>\n<h3 class=\"heading\" data-id=\"heading-0\">1.webpack是什么？</h3>\n<p>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。并且跟具你的在项目中的各种需求，实现自动化处理，解放我们的生产力</p>\n<ul>\n<li>代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 。</li>\n<li>文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等。</li>\n<li>代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载。</li>\n<li>模块合并：在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件。</li>\n<li>自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器。</li>\n<li>代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。</li>\n<li>自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。</li>\n</ul>\n<h3 class=\"heading\" data-id=\"heading-1\">2.项目初始化</h3>\n<pre><code class=\"hljs webpack init\" lang=\"webpack init\">mkdir webpack-start\ncd webpack-start\nnpm init\n</code></pre><h3 class=\"heading\" data-id=\"heading-2\">3.webpack核心概念</h3>\n<ul>\n<li>Entry：入口，webpack执行构建的第一步将从Entry开始，可抽象理解为输入</li>\n<li>Module：模块，在webpacl中一切皆为模块，一个模块对应一个文件，webpack会从配置的Entry开始递归找出所有依赖的模块</li>\n<li>Chunk：代码块，一个chunk由多个模块组合而成，用于将代码合并和分割</li>\n<li>Loader：模块转换器，用于把模块原内容按照需求转换为需要的新内容</li>\n<li>Plugin：扩展插件，在webpack构建流程中的特定时机注入扩展逻辑来改变构建结果和想要做的事情</li>\n<li>Output：输入结果，在webpack经过一系列处理并得到最终想要的代码然后输出结果</li>\n</ul>\n<blockquote>\n<p>Webpack 启动后会从 <code>Entry</code> 里配置的 <code>Module</code> 开始递归解析 Entry 依赖的所有 Module。 每找到一个 Module， 就会根据配置的<code>Loader</code>去找出对应的转换规则，对 Module 进行转换后，再解析出当前 Module 依赖的 Module。 这些模块会以 Entry 为单位进行分组，一个 Entry 和其所有依赖的 Module 被分到一个组也就是一个 <code>Chunk</code>。最后 Webpack 会把所有 Chunk 转换成文件输出。 在整个流程中 Webpack 会在恰当的时机执行 Plugin 里定义的逻辑。</p>\n</blockquote>\n<h5 class=\"heading\" data-id=\"heading-3\">1.Entry</h5>\n<blockquote>\n<p>context用来解决配置文件和入口文件不再同一层结构，列如我们配置文件在config，入口文件在根目录，则如下配置</p>\n</blockquote>\n<pre><code class=\"hljs context\" lang=\"context\">module.exports = {\n  context: path.join(__dirname, '..'), // 找到根目录\n  entry: './main.js' //根目录下的入口文件\n}\n</code></pre><blockquote>\n<p>最简单的单页面(SPA)Entry入口，将main.js引入，并根据main.js中引用和依赖的模块开始解析</p>\n</blockquote>\n<pre><code class=\"hljs entry\" lang=\"entry\">module.exports = {\n  entry: './main.js'\n}\n</code></pre><blockquote>\n<p>多页面(MPA)Entry入口，将多个文件引入，当然一般是读取指定文件夹内的入口文件，然后引入</p>\n</blockquote>\n<pre><code class=\"hljs entry\" lang=\"entry\">entry: {\n  home: \"./home.js\",\n  about: \"./about.js\",\n  contact: \"./contact.js\"\n}\n</code></pre><p>如果是单页面(传入的是字符串或字符串数组)，则chunk会被命名为main，如果是多页面(传入一个对象)，则每个键(key)会是chunk的名称，描述了chunk的入口起点</p>\n<h5 class=\"heading\" data-id=\"heading-4\">2.Output</h5>\n<blockquote>\n<p>Object 指示webpack如何去输出，以及在哪里输出你的bundle、asset 和其他你所打包或使用 webpack 载入的任何内容</p>\n</blockquote>\n<ul>\n<li>\n<p>path：输出目录对应一个绝对路径</p>\n<pre><code class=\"hljs path\" lang=\"path\">path: path.resolve(__dirname, 'dist')\n</code></pre></li>\n<li>\n<p>pathinfo：boolean 默认false作用是告诉webpack在bundle中引入所包含模块信息的相关注释，不应用于生产环境(production)，对开发环境(development)极其有用</p>\n</li>\n<li>\n<p>publicPath：主要作用是针对打包后的文件里面的静态文件路径处理</p>\n</li>\n<li>\n<p>filename：定义每个输出bundle的名称，这些bundle将写入output.path选项指定的目录下，对于单入口Entry，filename是一个静态名称</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"bundle.js\"\n</code></pre><p>但是在webpack中我们会用到代码拆分、各种插件plugin或多入口Entry创建多个bundle，这样我们就应该给每个bundle一个唯一的名称</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"[name].bundle.js\"\n</code></pre><p>使用内部chunk id</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"[id].bundle.js\"\n</code></pre><p>唯一hash生成</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"[name].[hash].bundle.js\"\n</code></pre><p>使用基于每个 chunk 内容的 hash</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"[chunkhash].bundle.js\"\n</code></pre></li>\n</ul>\n<h5 class=\"heading\" data-id=\"heading-5\">3.Module模块</h5>\n<blockquote>\n<p>处理项目中应用的不同模块，主要配置皆在Rules中，匹配到请求的规则数组，这些规则能够对模块应用loader，或者修改解析器parser</p>\n</blockquote>\n<ul>\n<li>\n<p>Module.noParse： 防止webpack解析的时候，将规则匹配成功的文件进行解析和忽略大型的library来对性能的优化，在被忽略的文件中不应该含有import、require和define的调用</p>\n<pre><code class=\"hljs noParse\" lang=\"noParse\">module.exports = {\n  module: {\n    rules: [],\n    noParse: function(content) {\n      return /jquery|lodash/.test(content) // 忽略jquery文件解析，直接编译打包\n    }\n  }\n}\n</code></pre></li>\n<li>\n<p>Rules：创建模块时，匹配请求的规则数组</p>\n<ul>\n<li>\n<p>Rule条件：resource(请求文件的绝对路径)、issuer(被请求资源的模块文件的绝对路径，导入时的位置)，比如一个文件A导入文件B，resource是/B，issuer是/A是导入文件时的位置，而不是真正的位置，在规则中，test/include/exclude/resource对resource匹配，而issuer只对issuer匹配</p>\n</li>\n<li>\n<p>Test/include/exclude/resource/issuer的用法和区别</p>\n<pre><code class=\"hljs rule\" lang=\"rule\">module.exports = {\n    modules: {\n        rules: [\n          {\n            test: /\\.js?$/,\n            include: [\n              path.resolve(__dirname, \"app\")\n            ],\n            exclude: [\n              path.resolve(__dirname, \"app/demo\")\n            ],\n            resource:{\n              test: /\\.js?$/,\n              include: path.resolve(__dirname, \"app\"),\n              exclude: path.resolve(__dirname, \"app/demo\")\n            },\n            issuer: {\n              test: /\\.js?$/,\n              include: path.resolve(__dirname, \"app\"),\n              exclude: path.resolve(__dirname, \"app/demo\")\n            }\n          }\n        ]\n  }\n}\n</code></pre><p>test：一般是提供一个正则表达式或正则表达式的数组，绝对路径符合这个正则的则意味着满足这个条件</p>\n<p>include：是一个字符串或者字符串数组，指定目录中的文件需要走这个规则</p>\n<p>exclude：同样是一个字符串或者字符串数组，指定目录中的文件不需要走这个规则</p>\n<p>resource：就是对text/include/exclude的一个对象包装，和他们单独写没有区别</p>\n<p>issuer：和resource有异曲同工的作用，不过区别在于它是将这个rule应用于哪个文件以及这个文件所导入的所有依赖文件</p>\n</li>\n<li>\n<p>resourceQuery：和resource用法一样，不过针对的是匹配结果'?'后面的路径参数，可以调用resource中的text等</p>\n</li>\n<li>\n<p>oneOf：表示对该资源只应用第一个匹配的规则，一般结合resourceQuery</p>\n<pre><code class=\"hljs oneOf\" lang=\"oneOf\">{\n  test: /\\.(png|jpe?g|gif|svg)$/,\n  oneOf: [\n    {\n      resourceQuery: /inline/, \n      loader: 'url-loader'\n    },\n    {\n      loader: 'file-loader'\n    }\n  ]\n}\n</code></pre><ul>\n<li>path/to/foo.png?inline: 会匹配url-loader</li>\n<li>path/to/foo.png?other:会匹配file-loader</li>\n<li>path/to/foo.png: 会匹配file-loader</li>\n</ul>\n</li>\n<li>\n<p>useEntry：object包含着每一个loader并且对应loader的配置文件</p>\n<pre><code class=\"hljs useEntry\" lang=\"useEntry\">{\n  loader: \"css-loader\",\n  options: {\n    modules: true\n  }\n}\n</code></pre><p>options会传入loader，可以理解为loader的选项</p>\n</li>\n<li>\n<p>use：是对useEntry的集合，并且对每一个入口指定使用一个loader</p>\n<pre><code class=\"hljs use\" lang=\"use\">use: [\n  'style-loader',\n  {\n    loader: 'css-loader',\n    options: {\n      importLoaders: 1\n    }\n  },\n  {\n    loader: 'less-loader',\n    options: {\n      noIeCompat: true\n    }\n  }\n]\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<h5 class=\"heading\" data-id=\"heading-6\">4.Resolve解析</h5>\n<blockquote>\n<p>主要用来模块如何被解析，给webpack提供默认值</p>\n</blockquote>\n<ul>\n<li>\n<p>alias：object主要用来让import和require调用更方便，设置初始路径</p>\n<pre><code class=\"hljs alias\" lang=\"alias\">module.exports = {\n alias: {\n  Utilities: path.resolve(__dirname, 'src/utilities/'),\n  Templates: path.resolve(__dirname, 'src/templates/')\n }   \n}\n// 最开始的import\nimport Utility from '../../utilities/utility';\n// 配置完以后\nimport Utility from 'Utilities/utility';\n</code></pre></li>\n<li>\n<p>enforceExtension：Boolean 默认false，表示引用不需要扩展名，为true时，import、require中引用必须加扩展名</p>\n</li>\n<li>\n<p>extensions：Array 自动解析不需要扩展名</p>\n<pre><code class=\"hljs extensions\" lang=\"extensions\">extensions: [\".js\", \".json\"]  // .js、.json引入不需要扩展名\n</code></pre></li>\n<li>\n<p>modules：Array webpack解析模块的时候需要搜索的目录，一般用于优先搜索和非node_modules文件中的自定义模块</p>\n<pre><code class=\"hljs modules\" lang=\"modules\">modules: [path.resolve(__dirname, \"src\"), \"node_modules\"] //优先搜索src目录\n</code></pre></li>\n</ul>\n<h5 class=\"heading\" data-id=\"heading-7\">5.Loader</h5>\n<blockquote>\n<p>通过使用不同的Loader，Webpack可以要把不同的文件都转成JS文件,比如CSS、ES6/7、JSX等，一般用于module的use中</p>\n</blockquote>\n<pre><code class=\"hljs loader\" lang=\"loader\">module: {\n  rules:[\n      {\n        test:/\\.css$/,\n        use:['style-loader','css-loader'],\n        include:path.join(__dirname,'./src'),\n        exclude:/node_modules/\n      }\n  ]      \n}\n</code></pre><p>具体相关loader需要查看你要引入的loader官方文档API，手写Loader会在下一篇文章具体介绍</p>\n<h5 class=\"heading\" data-id=\"heading-8\">6.Plugin插件</h5>\n<blockquote>\n<p>Array 扩展webpack，在webpack构建流程中的特定时机注入扩展逻辑来改变构建结果和想要做的事情，具体使用查看你引入的plugin官方文档，手写plugin会在后续文章中推出</p>\n</blockquote>\n<h5 class=\"heading\" data-id=\"heading-9\">7.webpack-dev-server</h5>\n<blockquote>\n<p>开发中的server，webpack-dev-server可以快速搭建起本地服务，具体使用查看 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-dev-server\" rel=\"nofollow noopener noreferrer\">webpack-dev-server</a></p>\n</blockquote>\n<h5 class=\"heading\" data-id=\"heading-10\">8.Devtool</h5>\n<blockquote>\n<p>此选项控制是否生成，以及如何生成，官方推荐 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdoc.webpack-china.org%2Fplugins%2Fsource-map-dev-tool-plugin\" rel=\"nofollow noopener noreferrer\">SourceMapDevToolPlugin</a> 和 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdoc.webpack-china.org%2Floaders%2Fsource-map-loader\" rel=\"nofollow noopener noreferrer\">source-map-loader</a> 建议看官方文档 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdoc.webpack-china.org%2Fconfiguration%2Fdevtool%2F\" rel=\"nofollow noopener noreferrer\">Devtool</a> 主要用来控制打包品质和在dev环境的调试便捷度和编译的快慢</p>\n</blockquote>\n<h5 class=\"heading\" data-id=\"heading-11\">9.Watch</h5>\n<blockquote>\n<p>webpack 可以监听文件变化，当它们修改后会重新编译和 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-hot-middleware\" rel=\"nofollow noopener noreferrer\">HotModuleReplacementPlugin</a> 有相似之处，监听文件变动热启动</p>\n</blockquote>\n<h3 class=\"heading\" data-id=\"heading-12\">4.配置webpack</h3>\n<p>webpack安装命令</p>\n<pre><code class=\"hljs webpack\" lang=\"webpack\">npm install webpack webpack-cli -D\n</code></pre><p>Webpack.config.js</p>\n<blockquote>\n<p>具体用到的plugin插件</p>\n</blockquote>\n<ul>\n<li>clean-webpack-plugin：用于打包前清空输出目录 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fclean-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n<li>html-webpack-plugin：用于自动产出HTML和引用产出的资源 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fhtml-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n<li>copy-webpack-plugin：用于拷贝静态资源，包括未被引用的资源 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fcopy-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n<li>uglifyjs-webpack-plugin：用于压缩JS可以让输出的JS文件体积更小、加载更快、流量更省，还有混淆代码的加密功能 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fuglifyjs-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n<li>extract-text-webpack-plugin：因为CSS的下载和JS可以并行,当一个HTML文件很大的时候，我们可以把CSS单独提取出来加载 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fextract-text-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n</ul>\n<pre><code class=\"hljs webpack-server\" lang=\"webpack-server\">const path = require('path');\nconst webpack = require('webpack');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst CopyWebpackPlugin = require('copy-webpack-plugin');\nconst UglifyjsWebpackPlugin = require('uglifyjs-webpack-plugin')\n// npm i extract-text-webpack-plugin@next // @next可以安装下一个非正式版本\nconst ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');\nlet cssExtract = new ExtractTextWebpackPlugin({\n    filename: 'css/css.css',\n    allChunks: true\n});\nlet lessExtract = new ExtractTextWebpackPlugin('css/less.css');\nlet sassExtract = new ExtractTextWebpackPlugin('css/sass.css');\n/**\n * 有些时候我们希望把页面中的CSS文件单独拉出来保存加载\n * extract-text-webpack-plugin\n */\n//let pages = ['index', 'base'];\n// pages = pages.map(page =&gt; new HtmlWebpackPlugin({\n//     template: './src/index.html',//指定产的HTML模板\n//     filename: `${page}.html`,//产出的HTML文件名\n//     title: `${page}`,\n//     chunks: ['common', `${page}`],//在产出的HTML文件里引入哪些代码块\n//     hash: true,// 会在引入的js里加入查询字符串避免缓存,\n//     minify: {\n//         removeAttributeQuotes: true\n//     }\n// }));\nmodule.exports = {\n    //先找到每个入口(Entry)，然后从各个入口分别出发，找到依赖的模块(Module)，\n    //然后生成一个Chunk(代码块),最后会把Chunk写到文件系统中(Assets)   \n    entry: './src/main.js',\n    output: {\n        path: path.join(__dirname, 'dist'),//输出的文件夹，只能是绝对路径 \n        //name是entry名字main,hash根据打包后的文件内容计算出来的一个hash值\n        filename: '[name].[hash].js' //打包后的文件名\n    },\n    resolve: {\n        //引入模块的时候，可以不用扩展名 \n        extensions: [\".js\", \".less\", \".json\"],\n        alias: {//别名\n            \"bootstrap\": \"bootstrap/dist/css/bootstrap.css\"\n        }\n    },\n    //表示监控源文件的变化，当源文件发生改变后，则重新打包\n    watch: false,\n    watchOptions: {\n        ignored: /node_modules/,\n        poll: 1000,//每秒钟询问的次数\n        aggregateTimeout: 500//\n    },\n    //devtool: 'source-map',//单独文件，可以定位到哪一列出错了\n    // devtool: 'cheap-module-source-map',//单独文件，体积更小，但只能定位到哪一行出错\n    // devtool: 'eval-source-map',//不会生成单独文件，\n    // devtool: 'cheap-module-eval-source-map',//不会生成单独文件 只定位到行，体积更小\n    /*\n    loader有三种写法\n    use\n    loader\n    use+loader\n    * */\n    module: {\n        rules: [\n            {\n                test: require.resolve('jquery'),\n                use: {\n                    loader: 'expose-loader',\n                    options: '$'\n                }\n            },\n            {\n                test: /\\.js/,\n                use: {\n                    loader: 'babel-loader',\n                    query: {\n                        presets: [\"env\", \"stage-0\", \"react\"]\n                    }\n                }\n            },\n            {\n                //file-loader是解析图片地址，把图片从源位置拷贝到目标位置并且修改原引用地址\n                //可以处理任意的二进制，bootstrap 里字体\n                //url-loader可以在文件比较小的时候，直接变成base64字符串内嵌到页面中\n                test: /\\.(png|jpg|gif|svg|bmp|eot|woff|woff2|ttf)/,\n                loader: {\n                    loader: 'url-loader',\n                    options: {\n                        limit: 5 * 1024,\n                        //指定拷贝文件的输出目录 \n                        outputPath: 'images/'\n                    }\n                }\n            },\n            {\n                test: /\\.css$/,//转换文件的匹配正则\n                //css-loader用来解析处理CSS文件中的url路径,要把CSS文件变成一个模块\n                //style-loader 可以把CSS文件变成style标签插入head中\n                //多个loader是有顺序要求的，从右往左写，因为转换的时候是从右往左转换\n                //此插件先用css-loader处理一下css文件\n                //如果压缩\n                loader: cssExtract.extract({\n                    use: [\"css-loader?minimize\"]\n                })\n                //loader: [\"style-loader\", \"css-loader\", \"postcss-loader\"]\n            },\n            {\n                test: /\\.less$/,\n                loader: lessExtract.extract({\n                    use: [\"css-loader?minimize\", \"less-loader\"]\n                })\n                //use: [\"style-loader\", \"css-loader\", \"less-loader\"]\n            },\n            {\n                test: /\\.scss$/,\n                loader: sassExtract.extract({\n                    use: [\"css-loader?minimize\", \"sass-loader\"]\n                })\n                // use: [\"style-loader\", \"css-loader\", \"sass-loader\"]\n            },\n            {\n                test: /\\.(html|htm)/,\n                loader: 'html-withimg-loader'\n            }\n        ]\n    },\n    plugins: [\n        //用来自动向模块内部注入变量\n        // new webpack.ProvidePlugin({\n        //     $: 'jquery'\n        // }),\n        new UglifyjsWebpackPlugin(),\n        new CleanWebpackPlugin([path.join(__dirname, 'dist')]),\n        //此插件可以自动产出html文件\n        new HtmlWebpackPlugin({\n            template: './src/index.html',//指定产的HTML模板\n            filename: `index.html`,//产出的HTML文件名\n            title: 'index',\n            hash: true,// 会在引入的js里加入查询字符串避免缓存,\n            minify: {\n                removeAttributeQuotes: true\n            }\n        }),\n        new CopyWebpackPlugin([{\n            from: path.join(__dirname, 'public'),\n            to: path.join(__dirname, 'dist', 'public')\n        }]),\n        cssExtract,\n        lessExtract,\n        sassExtract\n    ],\n    //配置此静态文件服务器，可以用来预览打包后项目\n    devServer: {\n        contentBase: './dist',\n        host: 'localhost',\n        port: 8000,\n        compress: true,//服务器返回给浏览器的时候是否启动gzip压缩\n    }\n}\n</code></pre>","slug":"myfirstPage","published":1,"updated":"2018-04-17T01:55:31.000Z","_id":"cjg30mdwq0000hyj37wtql3yw","comments":1,"layout":"post","photos":[],"link":"","content":"<p><div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"main-area article-area shadow\"><time data-v-13f76525=\"\" datetime=\"2018-04-14T10:31:42.809Z\" title=\"Sat Apr 14 2018 18:31:42 GMT+0800 (CST)\" class=\"time\">2018 年 04 月 14 日</time><!----></div><!----><div data-v-13f76525=\"\" itemprop=\"articleBody\" class=\"article-content\"><blockquote></blockquote></div></p>\n<p></p><p>webpack一直是前端工程师的痛点，因为他的复杂、分散、loader、plugin这些第三方，让我们的学习成本陡然上升，使我们一直对他的配置模棱两可，今天带大家彻底明白他如何配置，摆脱困扰我们很久的痛点。本篇主要是webpack基础配置详解，关于webpack的模块chunk、编译阶段流程、输出阶段流程、loader的编写和手写plugin会在后续文章推出，为了避免错过可以关注我或者收藏我的个人博客<a href=\"http://www.ngaiwe.com\" target=\"_blank\" rel=\"noopener\">www.ngaiwe.com</a></p><br><p></p>\n<p></p><h3 class=\"heading\" data-id=\"heading-0\">1.webpack是什么？</h3><p></p>\n<p></p><p>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。并且跟具你的在项目中的各种需求，实现自动化处理，解放我们的生产力</p><p></p>\n<p><ul></ul></p>\n<p><li>代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 。</li></p>\n<p><li>文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等。</li></p>\n<p><li>代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载。</li></p>\n<p><li>模块合并：在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件。</li></p>\n<p><li>自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器。</li></p>\n<p><li>代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。</li></p>\n<p><li>自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。</li><br></p>\n<p></p><h3 class=\"heading\" data-id=\"heading-1\">2.项目初始化</h3><p></p>\n<pre><code class=\"hljs webpack init\" lang=\"webpack init\">mkdir webpack-start\ncd webpack-start\nnpm init\n</code></pre><h3 class=\"heading\" data-id=\"heading-2\">3.webpack核心概念</h3>\n<ul>\n<li>Entry：入口，webpack执行构建的第一步将从Entry开始，可抽象理解为输入</li>\n<li>Module：模块，在webpacl中一切皆为模块，一个模块对应一个文件，webpack会从配置的Entry开始递归找出所有依赖的模块</li>\n<li>Chunk：代码块，一个chunk由多个模块组合而成，用于将代码合并和分割</li>\n<li>Loader：模块转换器，用于把模块原内容按照需求转换为需要的新内容</li>\n<li>Plugin：扩展插件，在webpack构建流程中的特定时机注入扩展逻辑来改变构建结果和想要做的事情</li>\n<li>Output：输入结果，在webpack经过一系列处理并得到最终想要的代码然后输出结果</li>\n</ul>\n<blockquote>\n<p>Webpack 启动后会从 <code>Entry</code> 里配置的 <code>Module</code> 开始递归解析 Entry 依赖的所有 Module。 每找到一个 Module， 就会根据配置的<code>Loader</code>去找出对应的转换规则，对 Module 进行转换后，再解析出当前 Module 依赖的 Module。 这些模块会以 Entry 为单位进行分组，一个 Entry 和其所有依赖的 Module 被分到一个组也就是一个 <code>Chunk</code>。最后 Webpack 会把所有 Chunk 转换成文件输出。 在整个流程中 Webpack 会在恰当的时机执行 Plugin 里定义的逻辑。</p>\n</blockquote>\n<h5 class=\"heading\" data-id=\"heading-3\">1.Entry</h5>\n<blockquote>\n<p>context用来解决配置文件和入口文件不再同一层结构，列如我们配置文件在config，入口文件在根目录，则如下配置</p>\n</blockquote>\n<pre><code class=\"hljs context\" lang=\"context\">module.exports = {\n  context: path.join(__dirname, '..'), // 找到根目录\n  entry: './main.js' //根目录下的入口文件\n}\n</code></pre><blockquote>\n<p>最简单的单页面(SPA)Entry入口，将main.js引入，并根据main.js中引用和依赖的模块开始解析</p>\n</blockquote>\n<pre><code class=\"hljs entry\" lang=\"entry\">module.exports = {\n  entry: './main.js'\n}\n</code></pre><blockquote>\n<p>多页面(MPA)Entry入口，将多个文件引入，当然一般是读取指定文件夹内的入口文件，然后引入</p>\n</blockquote>\n<pre><code class=\"hljs entry\" lang=\"entry\">entry: {\n  home: \"./home.js\",\n  about: \"./about.js\",\n  contact: \"./contact.js\"\n}\n</code></pre><p>如果是单页面(传入的是字符串或字符串数组)，则chunk会被命名为main，如果是多页面(传入一个对象)，则每个键(key)会是chunk的名称，描述了chunk的入口起点</p>\n<h5 class=\"heading\" data-id=\"heading-4\">2.Output</h5>\n<blockquote>\n<p>Object 指示webpack如何去输出，以及在哪里输出你的bundle、asset 和其他你所打包或使用 webpack 载入的任何内容</p>\n</blockquote>\n<ul>\n<li>\n<p>path：输出目录对应一个绝对路径</p>\n<pre><code class=\"hljs path\" lang=\"path\">path: path.resolve(__dirname, 'dist')\n</code></pre></li>\n<li>\n<p>pathinfo：boolean 默认false作用是告诉webpack在bundle中引入所包含模块信息的相关注释，不应用于生产环境(production)，对开发环境(development)极其有用</p>\n</li>\n<li>\n<p>publicPath：主要作用是针对打包后的文件里面的静态文件路径处理</p>\n</li>\n<li>\n<p>filename：定义每个输出bundle的名称，这些bundle将写入output.path选项指定的目录下，对于单入口Entry，filename是一个静态名称</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"bundle.js\"\n</code></pre><p>但是在webpack中我们会用到代码拆分、各种插件plugin或多入口Entry创建多个bundle，这样我们就应该给每个bundle一个唯一的名称</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"[name].bundle.js\"\n</code></pre><p>使用内部chunk id</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"[id].bundle.js\"\n</code></pre><p>唯一hash生成</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"[name].[hash].bundle.js\"\n</code></pre><p>使用基于每个 chunk 内容的 hash</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"[chunkhash].bundle.js\"\n</code></pre></li>\n</ul>\n<h5 class=\"heading\" data-id=\"heading-5\">3.Module模块</h5>\n<blockquote>\n<p>处理项目中应用的不同模块，主要配置皆在Rules中，匹配到请求的规则数组，这些规则能够对模块应用loader，或者修改解析器parser</p>\n</blockquote>\n<ul>\n<li>\n<p>Module.noParse： 防止webpack解析的时候，将规则匹配成功的文件进行解析和忽略大型的library来对性能的优化，在被忽略的文件中不应该含有import、require和define的调用</p>\n<pre><code class=\"hljs noParse\" lang=\"noParse\">module.exports = {\n  module: {\n    rules: [],\n    noParse: function(content) {\n      return /jquery|lodash/.test(content) // 忽略jquery文件解析，直接编译打包\n    }\n  }\n}\n</code></pre></li>\n<li>\n<p>Rules：创建模块时，匹配请求的规则数组</p>\n<ul>\n<li>\n<p>Rule条件：resource(请求文件的绝对路径)、issuer(被请求资源的模块文件的绝对路径，导入时的位置)，比如一个文件A导入文件B，resource是/B，issuer是/A是导入文件时的位置，而不是真正的位置，在规则中，test/include/exclude/resource对resource匹配，而issuer只对issuer匹配</p>\n</li>\n<li>\n<p>Test/include/exclude/resource/issuer的用法和区别</p>\n<pre><code class=\"hljs rule\" lang=\"rule\">module.exports = {\n    modules: {\n        rules: [\n          {\n            test: /\\.js?$/,\n            include: [\n              path.resolve(__dirname, \"app\")\n            ],\n            exclude: [\n              path.resolve(__dirname, \"app/demo\")\n            ],\n            resource:{\n              test: /\\.js?$/,\n              include: path.resolve(__dirname, \"app\"),\n              exclude: path.resolve(__dirname, \"app/demo\")\n            },\n            issuer: {\n              test: /\\.js?$/,\n              include: path.resolve(__dirname, \"app\"),\n              exclude: path.resolve(__dirname, \"app/demo\")\n            }\n          }\n        ]\n  }\n}\n</code></pre><p>test：一般是提供一个正则表达式或正则表达式的数组，绝对路径符合这个正则的则意味着满足这个条件</p>\n<p>include：是一个字符串或者字符串数组，指定目录中的文件需要走这个规则</p>\n<p>exclude：同样是一个字符串或者字符串数组，指定目录中的文件不需要走这个规则</p>\n<p>resource：就是对text/include/exclude的一个对象包装，和他们单独写没有区别</p>\n<p>issuer：和resource有异曲同工的作用，不过区别在于它是将这个rule应用于哪个文件以及这个文件所导入的所有依赖文件</p>\n</li>\n<li>\n<p>resourceQuery：和resource用法一样，不过针对的是匹配结果'?'后面的路径参数，可以调用resource中的text等</p>\n</li>\n<li>\n<p>oneOf：表示对该资源只应用第一个匹配的规则，一般结合resourceQuery</p>\n<pre><code class=\"hljs oneOf\" lang=\"oneOf\">{\n  test: /\\.(png|jpe?g|gif|svg)$/,\n  oneOf: [\n    {\n      resourceQuery: /inline/, \n      loader: 'url-loader'\n    },\n    {\n      loader: 'file-loader'\n    }\n  ]\n}\n</code></pre><ul>\n<li>path/to/foo.png?inline: 会匹配url-loader</li>\n<li>path/to/foo.png?other:会匹配file-loader</li>\n<li>path/to/foo.png: 会匹配file-loader</li>\n</ul>\n</li>\n<li>\n<p>useEntry：object包含着每一个loader并且对应loader的配置文件</p>\n<pre><code class=\"hljs useEntry\" lang=\"useEntry\">{\n  loader: \"css-loader\",\n  options: {\n    modules: true\n  }\n}\n</code></pre><p>options会传入loader，可以理解为loader的选项</p>\n</li>\n<li>\n<p>use：是对useEntry的集合，并且对每一个入口指定使用一个loader</p>\n<pre><code class=\"hljs use\" lang=\"use\">use: [\n  'style-loader',\n  {\n    loader: 'css-loader',\n    options: {\n      importLoaders: 1\n    }\n  },\n  {\n    loader: 'less-loader',\n    options: {\n      noIeCompat: true\n    }\n  }\n]\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<h5 class=\"heading\" data-id=\"heading-6\">4.Resolve解析</h5>\n<blockquote>\n<p>主要用来模块如何被解析，给webpack提供默认值</p>\n</blockquote>\n<ul>\n<li>\n<p>alias：object主要用来让import和require调用更方便，设置初始路径</p>\n<pre><code class=\"hljs alias\" lang=\"alias\">module.exports = {\n alias: {\n  Utilities: path.resolve(__dirname, 'src/utilities/'),\n  Templates: path.resolve(__dirname, 'src/templates/')\n }   \n}\n// 最开始的import\nimport Utility from '../../utilities/utility';\n// 配置完以后\nimport Utility from 'Utilities/utility';\n</code></pre></li>\n<li>\n<p>enforceExtension：Boolean 默认false，表示引用不需要扩展名，为true时，import、require中引用必须加扩展名</p>\n</li>\n<li>\n<p>extensions：Array 自动解析不需要扩展名</p>\n<pre><code class=\"hljs extensions\" lang=\"extensions\">extensions: [\".js\", \".json\"]  // .js、.json引入不需要扩展名\n</code></pre></li>\n<li>\n<p>modules：Array webpack解析模块的时候需要搜索的目录，一般用于优先搜索和非node_modules文件中的自定义模块</p>\n<pre><code class=\"hljs modules\" lang=\"modules\">modules: [path.resolve(__dirname, \"src\"), \"node_modules\"] //优先搜索src目录\n</code></pre></li>\n</ul>\n<h5 class=\"heading\" data-id=\"heading-7\">5.Loader</h5>\n<blockquote>\n<p>通过使用不同的Loader，Webpack可以要把不同的文件都转成JS文件,比如CSS、ES6/7、JSX等，一般用于module的use中</p>\n</blockquote>\n<pre><code class=\"hljs loader\" lang=\"loader\">module: {\n  rules:[\n      {\n        test:/\\.css$/,\n        use:['style-loader','css-loader'],\n        include:path.join(__dirname,'./src'),\n        exclude:/node_modules/\n      }\n  ]      \n}\n</code></pre><p>具体相关loader需要查看你要引入的loader官方文档API，手写Loader会在下一篇文章具体介绍</p>\n<h5 class=\"heading\" data-id=\"heading-8\">6.Plugin插件</h5>\n<blockquote>\n<p>Array 扩展webpack，在webpack构建流程中的特定时机注入扩展逻辑来改变构建结果和想要做的事情，具体使用查看你引入的plugin官方文档，手写plugin会在后续文章中推出</p>\n</blockquote>\n<h5 class=\"heading\" data-id=\"heading-9\">7.webpack-dev-server</h5>\n<blockquote>\n<p>开发中的server，webpack-dev-server可以快速搭建起本地服务，具体使用查看 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-dev-server\" rel=\"nofollow noopener noreferrer\">webpack-dev-server</a></p>\n</blockquote>\n<h5 class=\"heading\" data-id=\"heading-10\">8.Devtool</h5>\n<blockquote>\n<p>此选项控制是否生成，以及如何生成，官方推荐 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdoc.webpack-china.org%2Fplugins%2Fsource-map-dev-tool-plugin\" rel=\"nofollow noopener noreferrer\">SourceMapDevToolPlugin</a> 和 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdoc.webpack-china.org%2Floaders%2Fsource-map-loader\" rel=\"nofollow noopener noreferrer\">source-map-loader</a> 建议看官方文档 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdoc.webpack-china.org%2Fconfiguration%2Fdevtool%2F\" rel=\"nofollow noopener noreferrer\">Devtool</a> 主要用来控制打包品质和在dev环境的调试便捷度和编译的快慢</p>\n</blockquote>\n<h5 class=\"heading\" data-id=\"heading-11\">9.Watch</h5>\n<blockquote>\n<p>webpack 可以监听文件变化，当它们修改后会重新编译和 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-hot-middleware\" rel=\"nofollow noopener noreferrer\">HotModuleReplacementPlugin</a> 有相似之处，监听文件变动热启动</p>\n</blockquote>\n<h3 class=\"heading\" data-id=\"heading-12\">4.配置webpack</h3>\n<p>webpack安装命令</p>\n<pre><code class=\"hljs webpack\" lang=\"webpack\">npm install webpack webpack-cli -D\n</code></pre><p>Webpack.config.js</p>\n<blockquote>\n<p>具体用到的plugin插件</p>\n</blockquote>\n<ul>\n<li>clean-webpack-plugin：用于打包前清空输出目录 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fclean-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n<li>html-webpack-plugin：用于自动产出HTML和引用产出的资源 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fhtml-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n<li>copy-webpack-plugin：用于拷贝静态资源，包括未被引用的资源 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fcopy-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n<li>uglifyjs-webpack-plugin：用于压缩JS可以让输出的JS文件体积更小、加载更快、流量更省，还有混淆代码的加密功能 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fuglifyjs-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n<li>extract-text-webpack-plugin：因为CSS的下载和JS可以并行,当一个HTML文件很大的时候，我们可以把CSS单独提取出来加载 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fextract-text-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n</ul>\n<pre><code class=\"hljs webpack-server\" lang=\"webpack-server\">const path = require('path');\nconst webpack = require('webpack');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst CopyWebpackPlugin = require('copy-webpack-plugin');\nconst UglifyjsWebpackPlugin = require('uglifyjs-webpack-plugin')\n// npm i extract-text-webpack-plugin@next // @next可以安装下一个非正式版本\nconst ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');\nlet cssExtract = new ExtractTextWebpackPlugin({\n    filename: 'css/css.css',\n    allChunks: true\n});\nlet lessExtract = new ExtractTextWebpackPlugin('css/less.css');\nlet sassExtract = new ExtractTextWebpackPlugin('css/sass.css');\n/**\n * 有些时候我们希望把页面中的CSS文件单独拉出来保存加载\n * extract-text-webpack-plugin\n */\n//let pages = ['index', 'base'];\n// pages = pages.map(page =&gt; new HtmlWebpackPlugin({\n//     template: './src/index.html',//指定产的HTML模板\n//     filename: `${page}.html`,//产出的HTML文件名\n//     title: `${page}`,\n//     chunks: ['common', `${page}`],//在产出的HTML文件里引入哪些代码块\n//     hash: true,// 会在引入的js里加入查询字符串避免缓存,\n//     minify: {\n//         removeAttributeQuotes: true\n//     }\n// }));\nmodule.exports = {\n    //先找到每个入口(Entry)，然后从各个入口分别出发，找到依赖的模块(Module)，\n    //然后生成一个Chunk(代码块),最后会把Chunk写到文件系统中(Assets)   \n    entry: './src/main.js',\n    output: {\n        path: path.join(__dirname, 'dist'),//输出的文件夹，只能是绝对路径 \n        //name是entry名字main,hash根据打包后的文件内容计算出来的一个hash值\n        filename: '[name].[hash].js' //打包后的文件名\n    },\n    resolve: {\n        //引入模块的时候，可以不用扩展名 \n        extensions: [\".js\", \".less\", \".json\"],\n        alias: {//别名\n            \"bootstrap\": \"bootstrap/dist/css/bootstrap.css\"\n        }\n    },\n    //表示监控源文件的变化，当源文件发生改变后，则重新打包\n    watch: false,\n    watchOptions: {\n        ignored: /node_modules/,\n        poll: 1000,//每秒钟询问的次数\n        aggregateTimeout: 500//\n    },\n    //devtool: 'source-map',//单独文件，可以定位到哪一列出错了\n    // devtool: 'cheap-module-source-map',//单独文件，体积更小，但只能定位到哪一行出错\n    // devtool: 'eval-source-map',//不会生成单独文件，\n    // devtool: 'cheap-module-eval-source-map',//不会生成单独文件 只定位到行，体积更小\n    /*\n    loader有三种写法\n    use\n    loader\n    use+loader\n    * */\n    module: {\n        rules: [\n            {\n                test: require.resolve('jquery'),\n                use: {\n                    loader: 'expose-loader',\n                    options: '$'\n                }\n            },\n            {\n                test: /\\.js/,\n                use: {\n                    loader: 'babel-loader',\n                    query: {\n                        presets: [\"env\", \"stage-0\", \"react\"]\n                    }\n                }\n            },\n            {\n                //file-loader是解析图片地址，把图片从源位置拷贝到目标位置并且修改原引用地址\n                //可以处理任意的二进制，bootstrap 里字体\n                //url-loader可以在文件比较小的时候，直接变成base64字符串内嵌到页面中\n                test: /\\.(png|jpg|gif|svg|bmp|eot|woff|woff2|ttf)/,\n                loader: {\n                    loader: 'url-loader',\n                    options: {\n                        limit: 5 * 1024,\n                        //指定拷贝文件的输出目录 \n                        outputPath: 'images/'\n                    }\n                }\n            },\n            {\n                test: /\\.css$/,//转换文件的匹配正则\n                //css-loader用来解析处理CSS文件中的url路径,要把CSS文件变成一个模块\n                //style-loader 可以把CSS文件变成style标签插入head中\n                //多个loader是有顺序要求的，从右往左写，因为转换的时候是从右往左转换\n                //此插件先用css-loader处理一下css文件\n                //如果压缩\n                loader: cssExtract.extract({\n                    use: [\"css-loader?minimize\"]\n                })\n                //loader: [\"style-loader\", \"css-loader\", \"postcss-loader\"]\n            },\n            {\n                test: /\\.less$/,\n                loader: lessExtract.extract({\n                    use: [\"css-loader?minimize\", \"less-loader\"]\n                })\n                //use: [\"style-loader\", \"css-loader\", \"less-loader\"]\n            },\n            {\n                test: /\\.scss$/,\n                loader: sassExtract.extract({\n                    use: [\"css-loader?minimize\", \"sass-loader\"]\n                })\n                // use: [\"style-loader\", \"css-loader\", \"sass-loader\"]\n            },\n            {\n                test: /\\.(html|htm)/,\n                loader: 'html-withimg-loader'\n            }\n        ]\n    },\n    plugins: [\n        //用来自动向模块内部注入变量\n        // new webpack.ProvidePlugin({\n        //     $: 'jquery'\n        // }),\n        new UglifyjsWebpackPlugin(),\n        new CleanWebpackPlugin([path.join(__dirname, 'dist')]),\n        //此插件可以自动产出html文件\n        new HtmlWebpackPlugin({\n            template: './src/index.html',//指定产的HTML模板\n            filename: `index.html`,//产出的HTML文件名\n            title: 'index',\n            hash: true,// 会在引入的js里加入查询字符串避免缓存,\n            minify: {\n                removeAttributeQuotes: true\n            }\n        }),\n        new CopyWebpackPlugin([{\n            from: path.join(__dirname, 'public'),\n            to: path.join(__dirname, 'dist', 'public')\n        }]),\n        cssExtract,\n        lessExtract,\n        sassExtract\n    ],\n    //配置此静态文件服务器，可以用来预览打包后项目\n    devServer: {\n        contentBase: './dist',\n        host: 'localhost',\n        port: 8000,\n        compress: true,//服务器返回给浏览器的时候是否启动gzip压缩\n    }\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p><div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"main-area article-area shadow\"><time data-v-13f76525=\"\" datetime=\"2018-04-14T10:31:42.809Z\" title=\"Sat Apr 14 2018 18:31:42 GMT+0800 (CST)\" class=\"time\">2018 年 04 月 14 日</time><!----></div><!----><div data-v-13f76525=\"\" itemprop=\"articleBody\" class=\"article-content\"><blockquote></blockquote></div></p>\n<p></p><p>webpack一直是前端工程师的痛点，因为他的复杂、分散、loader、plugin这些第三方，让我们的学习成本陡然上升，使我们一直对他的配置模棱两可，今天带大家彻底明白他如何配置，摆脱困扰我们很久的痛点。本篇主要是webpack基础配置详解，关于webpack的模块chunk、编译阶段流程、输出阶段流程、loader的编写和手写plugin会在后续文章推出，为了避免错过可以关注我或者收藏我的个人博客<a href=\"http://www.ngaiwe.com\" target=\"_blank\" rel=\"noopener\">www.ngaiwe.com</a></p><br><p></p>\n<p></p><h3 class=\"heading\" data-id=\"heading-0\">1.webpack是什么？</h3><p></p>\n<p></p><p>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。并且跟具你的在项目中的各种需求，实现自动化处理，解放我们的生产力</p><p></p>\n<p><ul></ul></p>\n<p><li>代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 。</li></p>\n<p><li>文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等。</li></p>\n<p><li>代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载。</li></p>\n<p><li>模块合并：在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件。</li></p>\n<p><li>自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器。</li></p>\n<p><li>代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。</li></p>\n<p><li>自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。</li><br></p>\n<p></p><h3 class=\"heading\" data-id=\"heading-1\">2.项目初始化</h3><p></p>\n<pre><code class=\"hljs webpack init\" lang=\"webpack init\">mkdir webpack-start\ncd webpack-start\nnpm init\n</code></pre><h3 class=\"heading\" data-id=\"heading-2\">3.webpack核心概念</h3>\n<ul>\n<li>Entry：入口，webpack执行构建的第一步将从Entry开始，可抽象理解为输入</li>\n<li>Module：模块，在webpacl中一切皆为模块，一个模块对应一个文件，webpack会从配置的Entry开始递归找出所有依赖的模块</li>\n<li>Chunk：代码块，一个chunk由多个模块组合而成，用于将代码合并和分割</li>\n<li>Loader：模块转换器，用于把模块原内容按照需求转换为需要的新内容</li>\n<li>Plugin：扩展插件，在webpack构建流程中的特定时机注入扩展逻辑来改变构建结果和想要做的事情</li>\n<li>Output：输入结果，在webpack经过一系列处理并得到最终想要的代码然后输出结果</li>\n</ul>\n<blockquote>\n<p>Webpack 启动后会从 <code>Entry</code> 里配置的 <code>Module</code> 开始递归解析 Entry 依赖的所有 Module。 每找到一个 Module， 就会根据配置的<code>Loader</code>去找出对应的转换规则，对 Module 进行转换后，再解析出当前 Module 依赖的 Module。 这些模块会以 Entry 为单位进行分组，一个 Entry 和其所有依赖的 Module 被分到一个组也就是一个 <code>Chunk</code>。最后 Webpack 会把所有 Chunk 转换成文件输出。 在整个流程中 Webpack 会在恰当的时机执行 Plugin 里定义的逻辑。</p>\n</blockquote>\n<h5 class=\"heading\" data-id=\"heading-3\">1.Entry</h5>\n<blockquote>\n<p>context用来解决配置文件和入口文件不再同一层结构，列如我们配置文件在config，入口文件在根目录，则如下配置</p>\n</blockquote>\n<pre><code class=\"hljs context\" lang=\"context\">module.exports = {\n  context: path.join(__dirname, '..'), // 找到根目录\n  entry: './main.js' //根目录下的入口文件\n}\n</code></pre><blockquote>\n<p>最简单的单页面(SPA)Entry入口，将main.js引入，并根据main.js中引用和依赖的模块开始解析</p>\n</blockquote>\n<pre><code class=\"hljs entry\" lang=\"entry\">module.exports = {\n  entry: './main.js'\n}\n</code></pre><blockquote>\n<p>多页面(MPA)Entry入口，将多个文件引入，当然一般是读取指定文件夹内的入口文件，然后引入</p>\n</blockquote>\n<pre><code class=\"hljs entry\" lang=\"entry\">entry: {\n  home: \"./home.js\",\n  about: \"./about.js\",\n  contact: \"./contact.js\"\n}\n</code></pre><p>如果是单页面(传入的是字符串或字符串数组)，则chunk会被命名为main，如果是多页面(传入一个对象)，则每个键(key)会是chunk的名称，描述了chunk的入口起点</p>\n<h5 class=\"heading\" data-id=\"heading-4\">2.Output</h5>\n<blockquote>\n<p>Object 指示webpack如何去输出，以及在哪里输出你的bundle、asset 和其他你所打包或使用 webpack 载入的任何内容</p>\n</blockquote>\n<ul>\n<li>\n<p>path：输出目录对应一个绝对路径</p>\n<pre><code class=\"hljs path\" lang=\"path\">path: path.resolve(__dirname, 'dist')\n</code></pre></li>\n<li>\n<p>pathinfo：boolean 默认false作用是告诉webpack在bundle中引入所包含模块信息的相关注释，不应用于生产环境(production)，对开发环境(development)极其有用</p>\n</li>\n<li>\n<p>publicPath：主要作用是针对打包后的文件里面的静态文件路径处理</p>\n</li>\n<li>\n<p>filename：定义每个输出bundle的名称，这些bundle将写入output.path选项指定的目录下，对于单入口Entry，filename是一个静态名称</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"bundle.js\"\n</code></pre><p>但是在webpack中我们会用到代码拆分、各种插件plugin或多入口Entry创建多个bundle，这样我们就应该给每个bundle一个唯一的名称</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"[name].bundle.js\"\n</code></pre><p>使用内部chunk id</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"[id].bundle.js\"\n</code></pre><p>唯一hash生成</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"[name].[hash].bundle.js\"\n</code></pre><p>使用基于每个 chunk 内容的 hash</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"[chunkhash].bundle.js\"\n</code></pre></li>\n</ul>\n<h5 class=\"heading\" data-id=\"heading-5\">3.Module模块</h5>\n<blockquote>\n<p>处理项目中应用的不同模块，主要配置皆在Rules中，匹配到请求的规则数组，这些规则能够对模块应用loader，或者修改解析器parser</p>\n</blockquote>\n<ul>\n<li>\n<p>Module.noParse： 防止webpack解析的时候，将规则匹配成功的文件进行解析和忽略大型的library来对性能的优化，在被忽略的文件中不应该含有import、require和define的调用</p>\n<pre><code class=\"hljs noParse\" lang=\"noParse\">module.exports = {\n  module: {\n    rules: [],\n    noParse: function(content) {\n      return /jquery|lodash/.test(content) // 忽略jquery文件解析，直接编译打包\n    }\n  }\n}\n</code></pre></li>\n<li>\n<p>Rules：创建模块时，匹配请求的规则数组</p>\n<ul>\n<li>\n<p>Rule条件：resource(请求文件的绝对路径)、issuer(被请求资源的模块文件的绝对路径，导入时的位置)，比如一个文件A导入文件B，resource是/B，issuer是/A是导入文件时的位置，而不是真正的位置，在规则中，test/include/exclude/resource对resource匹配，而issuer只对issuer匹配</p>\n</li>\n<li>\n<p>Test/include/exclude/resource/issuer的用法和区别</p>\n<pre><code class=\"hljs rule\" lang=\"rule\">module.exports = {\n    modules: {\n        rules: [\n          {\n            test: /\\.js?$/,\n            include: [\n              path.resolve(__dirname, \"app\")\n            ],\n            exclude: [\n              path.resolve(__dirname, \"app/demo\")\n            ],\n            resource:{\n              test: /\\.js?$/,\n              include: path.resolve(__dirname, \"app\"),\n              exclude: path.resolve(__dirname, \"app/demo\")\n            },\n            issuer: {\n              test: /\\.js?$/,\n              include: path.resolve(__dirname, \"app\"),\n              exclude: path.resolve(__dirname, \"app/demo\")\n            }\n          }\n        ]\n  }\n}\n</code></pre><p>test：一般是提供一个正则表达式或正则表达式的数组，绝对路径符合这个正则的则意味着满足这个条件</p>\n<p>include：是一个字符串或者字符串数组，指定目录中的文件需要走这个规则</p>\n<p>exclude：同样是一个字符串或者字符串数组，指定目录中的文件不需要走这个规则</p>\n<p>resource：就是对text/include/exclude的一个对象包装，和他们单独写没有区别</p>\n<p>issuer：和resource有异曲同工的作用，不过区别在于它是将这个rule应用于哪个文件以及这个文件所导入的所有依赖文件</p>\n</li>\n<li>\n<p>resourceQuery：和resource用法一样，不过针对的是匹配结果'?'后面的路径参数，可以调用resource中的text等</p>\n</li>\n<li>\n<p>oneOf：表示对该资源只应用第一个匹配的规则，一般结合resourceQuery</p>\n<pre><code class=\"hljs oneOf\" lang=\"oneOf\">{\n  test: /\\.(png|jpe?g|gif|svg)$/,\n  oneOf: [\n    {\n      resourceQuery: /inline/, \n      loader: 'url-loader'\n    },\n    {\n      loader: 'file-loader'\n    }\n  ]\n}\n</code></pre><ul>\n<li>path/to/foo.png?inline: 会匹配url-loader</li>\n<li>path/to/foo.png?other:会匹配file-loader</li>\n<li>path/to/foo.png: 会匹配file-loader</li>\n</ul>\n</li>\n<li>\n<p>useEntry：object包含着每一个loader并且对应loader的配置文件</p>\n<pre><code class=\"hljs useEntry\" lang=\"useEntry\">{\n  loader: \"css-loader\",\n  options: {\n    modules: true\n  }\n}\n</code></pre><p>options会传入loader，可以理解为loader的选项</p>\n</li>\n<li>\n<p>use：是对useEntry的集合，并且对每一个入口指定使用一个loader</p>\n<pre><code class=\"hljs use\" lang=\"use\">use: [\n  'style-loader',\n  {\n    loader: 'css-loader',\n    options: {\n      importLoaders: 1\n    }\n  },\n  {\n    loader: 'less-loader',\n    options: {\n      noIeCompat: true\n    }\n  }\n]\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<h5 class=\"heading\" data-id=\"heading-6\">4.Resolve解析</h5>\n<blockquote>\n<p>主要用来模块如何被解析，给webpack提供默认值</p>\n</blockquote>\n<ul>\n<li>\n<p>alias：object主要用来让import和require调用更方便，设置初始路径</p>\n<pre><code class=\"hljs alias\" lang=\"alias\">module.exports = {\n alias: {\n  Utilities: path.resolve(__dirname, 'src/utilities/'),\n  Templates: path.resolve(__dirname, 'src/templates/')\n }   \n}\n// 最开始的import\nimport Utility from '../../utilities/utility';\n// 配置完以后\nimport Utility from 'Utilities/utility';\n</code></pre></li>\n<li>\n<p>enforceExtension：Boolean 默认false，表示引用不需要扩展名，为true时，import、require中引用必须加扩展名</p>\n</li>\n<li>\n<p>extensions：Array 自动解析不需要扩展名</p>\n<pre><code class=\"hljs extensions\" lang=\"extensions\">extensions: [\".js\", \".json\"]  // .js、.json引入不需要扩展名\n</code></pre></li>\n<li>\n<p>modules：Array webpack解析模块的时候需要搜索的目录，一般用于优先搜索和非node_modules文件中的自定义模块</p>\n<pre><code class=\"hljs modules\" lang=\"modules\">modules: [path.resolve(__dirname, \"src\"), \"node_modules\"] //优先搜索src目录\n</code></pre></li>\n</ul>\n<h5 class=\"heading\" data-id=\"heading-7\">5.Loader</h5>\n<blockquote>\n<p>通过使用不同的Loader，Webpack可以要把不同的文件都转成JS文件,比如CSS、ES6/7、JSX等，一般用于module的use中</p>\n</blockquote>\n<pre><code class=\"hljs loader\" lang=\"loader\">module: {\n  rules:[\n      {\n        test:/\\.css$/,\n        use:['style-loader','css-loader'],\n        include:path.join(__dirname,'./src'),\n        exclude:/node_modules/\n      }\n  ]      \n}\n</code></pre><p>具体相关loader需要查看你要引入的loader官方文档API，手写Loader会在下一篇文章具体介绍</p>\n<h5 class=\"heading\" data-id=\"heading-8\">6.Plugin插件</h5>\n<blockquote>\n<p>Array 扩展webpack，在webpack构建流程中的特定时机注入扩展逻辑来改变构建结果和想要做的事情，具体使用查看你引入的plugin官方文档，手写plugin会在后续文章中推出</p>\n</blockquote>\n<h5 class=\"heading\" data-id=\"heading-9\">7.webpack-dev-server</h5>\n<blockquote>\n<p>开发中的server，webpack-dev-server可以快速搭建起本地服务，具体使用查看 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-dev-server\" rel=\"nofollow noopener noreferrer\">webpack-dev-server</a></p>\n</blockquote>\n<h5 class=\"heading\" data-id=\"heading-10\">8.Devtool</h5>\n<blockquote>\n<p>此选项控制是否生成，以及如何生成，官方推荐 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdoc.webpack-china.org%2Fplugins%2Fsource-map-dev-tool-plugin\" rel=\"nofollow noopener noreferrer\">SourceMapDevToolPlugin</a> 和 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdoc.webpack-china.org%2Floaders%2Fsource-map-loader\" rel=\"nofollow noopener noreferrer\">source-map-loader</a> 建议看官方文档 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdoc.webpack-china.org%2Fconfiguration%2Fdevtool%2F\" rel=\"nofollow noopener noreferrer\">Devtool</a> 主要用来控制打包品质和在dev环境的调试便捷度和编译的快慢</p>\n</blockquote>\n<h5 class=\"heading\" data-id=\"heading-11\">9.Watch</h5>\n<blockquote>\n<p>webpack 可以监听文件变化，当它们修改后会重新编译和 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-hot-middleware\" rel=\"nofollow noopener noreferrer\">HotModuleReplacementPlugin</a> 有相似之处，监听文件变动热启动</p>\n</blockquote>\n<h3 class=\"heading\" data-id=\"heading-12\">4.配置webpack</h3>\n<p>webpack安装命令</p>\n<pre><code class=\"hljs webpack\" lang=\"webpack\">npm install webpack webpack-cli -D\n</code></pre><p>Webpack.config.js</p>\n<blockquote>\n<p>具体用到的plugin插件</p>\n</blockquote>\n<ul>\n<li>clean-webpack-plugin：用于打包前清空输出目录 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fclean-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n<li>html-webpack-plugin：用于自动产出HTML和引用产出的资源 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fhtml-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n<li>copy-webpack-plugin：用于拷贝静态资源，包括未被引用的资源 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fcopy-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n<li>uglifyjs-webpack-plugin：用于压缩JS可以让输出的JS文件体积更小、加载更快、流量更省，还有混淆代码的加密功能 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fuglifyjs-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n<li>extract-text-webpack-plugin：因为CSS的下载和JS可以并行,当一个HTML文件很大的时候，我们可以把CSS单独提取出来加载 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fextract-text-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n</ul>\n<pre><code class=\"hljs webpack-server\" lang=\"webpack-server\">const path = require('path');\nconst webpack = require('webpack');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst CopyWebpackPlugin = require('copy-webpack-plugin');\nconst UglifyjsWebpackPlugin = require('uglifyjs-webpack-plugin')\n// npm i extract-text-webpack-plugin@next // @next可以安装下一个非正式版本\nconst ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');\nlet cssExtract = new ExtractTextWebpackPlugin({\n    filename: 'css/css.css',\n    allChunks: true\n});\nlet lessExtract = new ExtractTextWebpackPlugin('css/less.css');\nlet sassExtract = new ExtractTextWebpackPlugin('css/sass.css');\n/**\n * 有些时候我们希望把页面中的CSS文件单独拉出来保存加载\n * extract-text-webpack-plugin\n */\n//let pages = ['index', 'base'];\n// pages = pages.map(page =&gt; new HtmlWebpackPlugin({\n//     template: './src/index.html',//指定产的HTML模板\n//     filename: `${page}.html`,//产出的HTML文件名\n//     title: `${page}`,\n//     chunks: ['common', `${page}`],//在产出的HTML文件里引入哪些代码块\n//     hash: true,// 会在引入的js里加入查询字符串避免缓存,\n//     minify: {\n//         removeAttributeQuotes: true\n//     }\n// }));\nmodule.exports = {\n    //先找到每个入口(Entry)，然后从各个入口分别出发，找到依赖的模块(Module)，\n    //然后生成一个Chunk(代码块),最后会把Chunk写到文件系统中(Assets)   \n    entry: './src/main.js',\n    output: {\n        path: path.join(__dirname, 'dist'),//输出的文件夹，只能是绝对路径 \n        //name是entry名字main,hash根据打包后的文件内容计算出来的一个hash值\n        filename: '[name].[hash].js' //打包后的文件名\n    },\n    resolve: {\n        //引入模块的时候，可以不用扩展名 \n        extensions: [\".js\", \".less\", \".json\"],\n        alias: {//别名\n            \"bootstrap\": \"bootstrap/dist/css/bootstrap.css\"\n        }\n    },\n    //表示监控源文件的变化，当源文件发生改变后，则重新打包\n    watch: false,\n    watchOptions: {\n        ignored: /node_modules/,\n        poll: 1000,//每秒钟询问的次数\n        aggregateTimeout: 500//\n    },\n    //devtool: 'source-map',//单独文件，可以定位到哪一列出错了\n    // devtool: 'cheap-module-source-map',//单独文件，体积更小，但只能定位到哪一行出错\n    // devtool: 'eval-source-map',//不会生成单独文件，\n    // devtool: 'cheap-module-eval-source-map',//不会生成单独文件 只定位到行，体积更小\n    /*\n    loader有三种写法\n    use\n    loader\n    use+loader\n    * */\n    module: {\n        rules: [\n            {\n                test: require.resolve('jquery'),\n                use: {\n                    loader: 'expose-loader',\n                    options: '$'\n                }\n            },\n            {\n                test: /\\.js/,\n                use: {\n                    loader: 'babel-loader',\n                    query: {\n                        presets: [\"env\", \"stage-0\", \"react\"]\n                    }\n                }\n            },\n            {\n                //file-loader是解析图片地址，把图片从源位置拷贝到目标位置并且修改原引用地址\n                //可以处理任意的二进制，bootstrap 里字体\n                //url-loader可以在文件比较小的时候，直接变成base64字符串内嵌到页面中\n                test: /\\.(png|jpg|gif|svg|bmp|eot|woff|woff2|ttf)/,\n                loader: {\n                    loader: 'url-loader',\n                    options: {\n                        limit: 5 * 1024,\n                        //指定拷贝文件的输出目录 \n                        outputPath: 'images/'\n                    }\n                }\n            },\n            {\n                test: /\\.css$/,//转换文件的匹配正则\n                //css-loader用来解析处理CSS文件中的url路径,要把CSS文件变成一个模块\n                //style-loader 可以把CSS文件变成style标签插入head中\n                //多个loader是有顺序要求的，从右往左写，因为转换的时候是从右往左转换\n                //此插件先用css-loader处理一下css文件\n                //如果压缩\n                loader: cssExtract.extract({\n                    use: [\"css-loader?minimize\"]\n                })\n                //loader: [\"style-loader\", \"css-loader\", \"postcss-loader\"]\n            },\n            {\n                test: /\\.less$/,\n                loader: lessExtract.extract({\n                    use: [\"css-loader?minimize\", \"less-loader\"]\n                })\n                //use: [\"style-loader\", \"css-loader\", \"less-loader\"]\n            },\n            {\n                test: /\\.scss$/,\n                loader: sassExtract.extract({\n                    use: [\"css-loader?minimize\", \"sass-loader\"]\n                })\n                // use: [\"style-loader\", \"css-loader\", \"sass-loader\"]\n            },\n            {\n                test: /\\.(html|htm)/,\n                loader: 'html-withimg-loader'\n            }\n        ]\n    },\n    plugins: [\n        //用来自动向模块内部注入变量\n        // new webpack.ProvidePlugin({\n        //     $: 'jquery'\n        // }),\n        new UglifyjsWebpackPlugin(),\n        new CleanWebpackPlugin([path.join(__dirname, 'dist')]),\n        //此插件可以自动产出html文件\n        new HtmlWebpackPlugin({\n            template: './src/index.html',//指定产的HTML模板\n            filename: `index.html`,//产出的HTML文件名\n            title: 'index',\n            hash: true,// 会在引入的js里加入查询字符串避免缓存,\n            minify: {\n                removeAttributeQuotes: true\n            }\n        }),\n        new CopyWebpackPlugin([{\n            from: path.join(__dirname, 'public'),\n            to: path.join(__dirname, 'dist', 'public')\n        }]),\n        cssExtract,\n        lessExtract,\n        sassExtract\n    ],\n    //配置此静态文件服务器，可以用来预览打包后项目\n    devServer: {\n        contentBase: './dist',\n        host: 'localhost',\n        port: 8000,\n        compress: true,//服务器返回给浏览器的时候是否启动gzip压缩\n    }\n}\n</code></pre>"},{"title":"hexo教程","date":"2016-04-17T01:11:42.000Z","_content":"简单说明一下这个hexo博客的步骤\n1:    安装node，git\n2：     npm -g hexo\n3:\t  hexo init projectname\n4:   cd projectname\n5:   hexo s\n6: 打开http://localhost:4000就可以看到自己的微博了","source":"_posts/new-article.md","raw":"---\ntitle: hexo教程\ndate: 2016-04-17 09:11:42\ntags:\n---\n简单说明一下这个hexo博客的步骤\n1:    安装node，git\n2：     npm -g hexo\n3:\t  hexo init projectname\n4:   cd projectname\n5:   hexo s\n6: 打开http://localhost:4000就可以看到自己的微博了","slug":"new-article","published":1,"updated":"2018-04-17T02:05:06.478Z","_id":"cjg30mdwu0001hyj3zblp9u1y","comments":1,"layout":"post","photos":[],"link":"","content":"<p>简单说明一下这个hexo博客的步骤<br>1:    安装node，git<br>2：     npm -g hexo<br>3:      hexo init projectname<br>4:   cd projectname<br>5:   hexo s<br>6: 打开<a href=\"http://localhost:4000就可以看到自己的微博了\" target=\"_blank\" rel=\"noopener\">http://localhost:4000就可以看到自己的微博了</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>简单说明一下这个hexo博客的步骤<br>1:    安装node，git<br>2：     npm -g hexo<br>3:      hexo init projectname<br>4:   cd projectname<br>5:   hexo s<br>6: 打开<a href=\"http://localhost:4000就可以看到自己的微博了\" target=\"_blank\" rel=\"noopener\">http://localhost:4000就可以看到自己的微博了</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-04-17T00:45:12.737Z","updated":"2018-04-17T00:45:12.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg30mdww0002hyj3pf1abiyc","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}